<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Stripe Effect Transition
stripes = 100;                              // Total amount of stripes
anim = false;                               // Used to change the time if needed
height = window_get_height() / stripes;     // Height of each stripe
width = window_get_width() + (window_get_width() / 5);// The width of each stripe
timer = -width;                             // Timer will work as the slowest stripe
roomChange = false;                         // True when half time has passed
maxTimer = window_get_width();              // How long the timer will last

// Define all necessary arrays
stripe_one[stripes] = 0;                    // X position for stripe on left side
stripe_two[stripes] = 0;                    // X position for stripe on right side
length[stripes] = 0;                        // Y position for each stripe
stripe_spd[stripes] = 0;                    // Random speed for each stripe

// Alarm is used to change the time to the new one and start transition
alarm[0] = 1;
xx = -1;
yy = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Stripe Effect - Finish array and start animation
// Get easy references for all port sizes
x = view_xport[0];
y = view_yport[0];
var stripe_w = window_get_width();
var stripe_h = window_get_height();

switch (kind) {
    case transition.stripe_hor:
        maxTimer = window_get_width();
    
        for (var i = stripes; i &gt; 0; i--) {
            stripe_one[i] = x - width;
            stripe_two[i] = (x + stripe_w) + width;
            length[i] = i * (stripe_h / stripes);
            stripe_spd[i] = random_range(width / time, width / time + (time / 8));
        }
    break;
    case transition.stripe_ver:  
        width = stripe_h + (stripe_h / 5);
        height = stripe_w / stripes;
        timer = y - width;
        maxTimer = window_get_height();
       
        for (var i = stripes; i &gt; 0; i--) {
            stripe_one[i] = y - width;
            stripe_two[i] = (y + stripe_h) + width;
            length[i] = i * (stripe_w / stripes);
            stripe_spd[i] = random_range(width / time, width / time + (time / 8));
        }
    break;
}

// Animation starts after this is true
anim = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Stripe Effect - Move the stripes
if (anim) {
    // Moves each stripe with their individual speed. Same speed for left and right stripe
    for (var i = stripes; i &gt; 0; i--) {  
        stripe_one[i] += stripe_spd[i];
        stripe_two[i] -= stripe_spd[i];
    }
    
    // Increase timer
    timer += width / time;
        
    // Check if the transition is halfways done
    if (timer + width &gt; maxTimer / 2 &amp;&amp; !roomChange) { 
        room_goto(next_room); roomChange = true;
        if (xx != -1) { obj_player.x = xx; }
        if (yy != -1) { obj_player.y = yy; }
    }
        
    // Destroy instance if transition is done
    if (timer &gt; maxTimer) { instance_destroy(); }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Transitions
switch (kind) {
    // Horizontal Stripes
    case transition.stripe_hor:
        // Sets the color. Can be changed
        draw_set_color(c_black);
        
        // Draws the stripes according to the already defined array variables
        for (var i = stripes; i &gt; 0; i--) {
            draw_rectangle(stripe_one[i], length[i], stripe_one[i] + width, length[i] - height, false);
            draw_rectangle(stripe_two[i], length[i], stripe_two[i] - width, length[i] - height, false);
        }
    break;
    // Vertical Stripes
    case transition.stripe_ver:
        // Sets the color. Can be changed
        draw_set_color(c_black);
    
        // Draws the stripes according to the already defined array variables
        for (var i = stripes; i &gt; 0; i--) {
            draw_rectangle(length[i], stripe_one[i], length[i] - height, stripe_one[i] + width, false);
            draw_rectangle(length[i], stripe_two[i], length[i] - height, stripe_two[i] - width, false);
        }
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
