<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>par_pausable</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize Dialogue Variables

message_current = 0;
timer = 0;
cutoff = 0;
done = false;

// Declare alarm timer (in seconds) and toggle variable
alarm[0] = room_speed;      //message speed
alarm[1] = room_speed * 3;  //display message 2
alarm[2] = room_speed * 4   //timer toggle

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Do Nothing
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Do Nothing

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Do Nothing
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Toggles on_start_level variable
/*
    Pauses timer and player actions on level start
    Destroys dialogue object when player presses 'ENTER'
*/

if(global.room_type != -1)
{
    obj_timer.stop = true;
    obj_player.toggle = -1;
}

if((( mouse_check_button_pressed(mb_left) &amp;&amp; mobile)
    || keyboard_check_pressed(vk_space)) 
    &amp;&amp; global.room_type != -1 &amp;&amp; alarm[2] == -1)
{
    with(obj_dialogue) instance_destroy();
    obj_timer.stop = false;
    obj_player.toggle = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Alarm[2] event

if(alarm[2] == -1 &amp;&amp; global.room_type == -1)
{
    with(obj_dialogue) instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw tinted box for problem text
if(alarm[0] = -1) 
{
width = display_get_gui_width();
height = display_get_gui_height();

draw_set_alpha(0.7);
    draw_set_color(c_black);
    draw_rectangle(0, 100, width, 175, false);
draw_set_alpha(1);


draw_set_halign(fa_center);
draw_set_valign(fa_middle);
draw_set_font(font_Default);
draw_set_color(c_yellow);

draw_text_ext(width/2, 135, global.message, 20, 600);

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw message and tinted box for normal room

if(alarm[1] = -1 &amp;&amp; global.room_type == 1)
{
width = display_get_gui_width();
height = display_get_gui_height();

draw_set_alpha(0.7);
    draw_set_color(c_black);
    draw_rectangle(0, 176, width, 250, false);
draw_set_alpha(1);

draw_set_halign(fa_center);
draw_set_valign(fa_middle);

draw_set_color(c_yellow);

    if(mobile)
    {
        if(global.attempts &gt; 1)
        {
            draw_text_ext(width/2, 230, "Tap ? for hints", 18, width/2);
        }    
        draw_text_ext(width/2, 210, "Tap here to continue", 18, width/2 - 50);
    }
    else
    {
        if(global.attempts &gt; 1)
        {
            draw_text_ext(width/2, 230, "Press P for hints", 18, width/2);
        }
        draw_text_ext(width/2, 210, "Press SPACE to continue", 18, width/2 - 50);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw message and tinted box for lab room

if(alarm[1] = -1 &amp;&amp; global.room_type == -1)
{
width = display_get_gui_width();
height = display_get_gui_height();

    if(mobile)
    {
        if(global.attempts &gt; 1)
        {
            draw_set_alpha(0.7);
            draw_set_color(c_black);
            draw_rectangle(0, 176, width, 250, false);
            draw_set_alpha(1);
            
            draw_set_halign(fa_center);
            draw_set_valign(fa_middle);
            
            draw_set_color(c_yellow);
            draw_text_ext(width/2, 230, "Tap ? for hints", 18, width/2);
        }    
        draw_text_ext(width/2, 210, "Tap here to continue", 18, width/2 - 50);
    }
    else
    {
        if(global.attempts &gt; 1)
        {
            draw_set_alpha(0.7);
            draw_set_color(c_black);
            draw_rectangle(0, 176, width, 250, false);
            draw_set_alpha(1);
            
            draw_set_halign(fa_center);
            draw_set_valign(fa_middle);
            
            draw_set_color(c_yellow);
            draw_text_ext(width/2, 230, "Press P for hints", 18, width/2);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
